[package]
name = "content-tag"
description = "A rust program that uses a fork of swc to parse and transform Javascript containing the content-tag proposal"
repository = "https://github.com/embroider-build/content-tag"
license = "MIT"
version = "1.1.2"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[profile.release]
lto = true
opt-level = 'z'
codegen-units = 1

[dependencies]
swc_common = { path = "../swc/crates/swc_common", features=["tty-emitter"] }
swc = { path = "../swc/crates/swc" }
# The feature set here needs to be chosen carefully to not accidentally enable
# "plugin_mode" and the related stuff, because with that enabled, wasm32 builds
# expect swc plugin-runner specific environment that we don't use. When that
# happens, the javascript shims try to do "require('env')" to find the missing
# stuff, which is nonsense and blows up.
swc_core = { path = "../swc/crates/swc_core", features = ["ecma_ast", "common", "ecma_visit", "ecma_transforms", "__testing_transform"] }
swc_atoms = { path = "../swc/crates/swc_atoms" }
swc_ecma_parser = { path = "../swc/crates/swc_ecma_parser" }
swc_ecma_codegen = { path = "../swc/crates/swc_ecma_codegen" }
swc_ecma_ast = { path = "../swc/crates/swc_ecma_ast" }
swc_ecma_visit = { path = "../swc/crates/swc_ecma_visit" }
swc_ecma_utils = { path = "../swc/crates/swc_ecma_utils" }
swc_ecma_transforms = { path = "../swc/crates/swc_ecma_transforms" }
swc_error_reporters = { path = "../swc/crates/swc_error_reporters" }
lazy_static = "1.4.0"
base64 = "0.21.4"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde-wasm-bindgen = "0.4"

wasm-bindgen = "0.2.95"
js-sys = "0.3.64"

[dependencies.uuid]
version = "1.11.0"
features = [
    "v4",       # Lets you generate random UUIDs
    "fast-rng"  # Use a faster (but still sufficiently random) RNG
]

[dev-dependencies]
difference = "2"
regex = "1.11.1"



